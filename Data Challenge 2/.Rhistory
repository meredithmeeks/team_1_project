varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, lcolor = "blue")
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, color = "blue")
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, gcolor = "blue")
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, lcolor = "pink")
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = 1)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 1)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 2)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 3)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 4)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 5)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 6)
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 6, bg = "blue")
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead", outer = TRUE,
cex = .6, pt.cex = .8, pch = 6, bg = "blue")
varImpPlot(rf, main = "Variance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 6, bg = "blue")
varImpPlot(rf, main = "\nVariance Importance Plot\nfor Predictors of Civilians Dead",
cex = .6, pt.cex = .8, pch = 6, bg = "blue")
names(rf$importance)
(rf$importance)
rownames(rf$importance)
ggplot(rf$importance, aes(x = rf$importance[,1], y = rownames(rf$importance))) +
geom_point()
ggplot(as.data.frame(rf$importance), aes(x = rf$importance[,1], y = rownames(rf$importance))) +
geom_point()
ggplot(as.data.frame(rf$importance), aes(x = reorder(rf$importance[,1]), y = rownames(rf$importance))) +
geom_point()
class(rf$importance[,1])
ggplot(as.data.frame(rf$importance), aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), -rf$importance[,1]))) +
geom_point()
ggplot(as.data.frame(rf$importance), aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point()
ggplot(as.data.frame(rf$importance), aes(x = rf$importance[,2], y = reorder(rownames(rf$importance), rf$importance[,2]))) +
geom_point()
ggplot(as.data.frame(rf$importance), aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point()
?labs
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
scale_y_discrete(size = .8)
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = .8))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 2))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8))
?opts
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8)) +
opts(plot.margin = unit(c(2, 2, 2, 2), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(2, 2, 2, 2), "cm"))
?plot,margin
?plot.margin
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(4, 2, 2, 2), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(.5, 2, 2, 2), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(1, 1, 1, 2), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(1, 1, 2, 1), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(2, .5, .5, 2), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(.5, .5, 2, 2), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 8),
plot.margin = unit(c(.5, 2, .5, 2), "cm"))
ggplot(as.data.frame(rf$importance),
aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
geom_point() +
theme(axis.text.y = element_text(size = 6))
knitr::opts_chunk$set(echo = TRUE)
civ_oc_wounded <- Confrontations$organized.crime.wounded + Confrontations$civilian.wounded
if (!require("dplyr")) {
install.packages("dplyr", dependencies = TRUE)
library(dplyr)
}
if (!require("tidyr")) {
install.packages("tidyr", dependencies = TRUE)
library(tidyr)
}
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
}
if (!require("readr")) {
install.packages("readr", dependencies = TRUE)
library(readr)
}
Confrontations <- read.csv("AllViolenceData_170216.csv")
Confrontations$date <- as.Date(Confrontations$date)
str(Confrontations)
civ_oc_wounded <- Confrontations$organized.crime.wounded + Confrontations$civilian.wounded
Confrontations_2 <- cbind(Confrontations, civ_oc_wounded)
civ_oc_wounded_plot <- ggplot(Confrontations_2, aes(civ_oc_wounded)) +
geom_bar() + theme_bw() +
xlab("Civilians and Organized Crime Wounded") + ylab("Count")
civ_oc_wounded_plot
# mean
mean(Confrontations_2$civ_oc_wounded)
# variance
var(Confrontations_2$civ_oc_wounded)
#independent variables:
Confrontations_2$arms_seized <- Confrontations_2$long.guns.seized + Confrontations_2$small.arms.seized
Confrontations_2$cart_clips_seized <- Confrontations_2$cartridge.sezied + Confrontations_2$clips.seized
ols_civ_oc_wounded <- glm(civ_oc_wounded ~ arms_seized + vehicles.seized + army + navy + afi + federal.police + municipal.police + ministerial.police + state.police, Confrontations_2, family="gaussian")
znb_civ_oc_wounded <- zeroinfl(civ_oc_wounded ~ arms_seized + vehicles.seized + army + navy + afi + federal.police + municipal.police + ministerial.police + state.police, data = Confrontations_2, dist = "negbin", EM = TRUE)
if (!require("dplyr")) {
install.packages("dplyr", dependencies = TRUE)
library(dplyr)
}
if (!require("tidyr")) {
install.packages("tidyr", dependencies = TRUE)
library(tidyr)
}
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
}
if (!require("readr")) {
install.packages("readr", dependencies = TRUE)
library(readr)
}
if (!require("pscl")) {
install.packages("pscl", dependencies = TRUE)
library(pscl)
}
if (!require("MASS")) {
install.packages("MASS", dependencies = TRUE)
library(MASS)
}
if (!require("boot")) {
install.packages("boot", dependencies = TRUE)
library(boot)
}
if (!require("AICcmodavg")) {
install.packages("AICcmodavg", dependencies = TRUE)
library(AICcmodavg)
}
if (!require("lubridate")) {
install.packages("lubridate", dependencies = TRUE)
library(lubridate)
}
#independent variables:
Confrontations_2$arms_seized <- Confrontations_2$long.guns.seized + Confrontations_2$small.arms.seized
Confrontations_2$cart_clips_seized <- Confrontations_2$cartridge.sezied + Confrontations_2$clips.seized
ols_civ_oc_wounded <- glm(civ_oc_wounded ~ arms_seized + vehicles.seized + army + navy + afi + federal.police + municipal.police + ministerial.police + state.police, Confrontations_2, family="gaussian")
znb_civ_oc_wounded <- zeroinfl(civ_oc_wounded ~ arms_seized + vehicles.seized + army + navy + afi + federal.police + municipal.police + ministerial.police + state.police, data = Confrontations_2, dist = "negbin", EM = TRUE)
summary(znb_civ_oc_wounded)
AICc(znb_civ_oc_wounded, return.K = FALSE, second.ord = FALSE)
table(Confrontations$category)
table(Confrontations$category == 3)
table(Confrontations$category)
table(Confrontations$category == "no.dead.wounded")
Confrontations_cat <- Confrontations
Confrontations_cat$anycasualties <- ifelse(Confrontations[Confrontations$category == "no.dead.wounded"],
"No", "Yes")
Confrontations_cat$anycasualties <- ifelse(Confrontations_cat[Confrontations_cat$category == "no.dead.wounded"],
"No", "Yes")
table(Confrontations_cat$category == "no.dead.wounded")
Confrontations_cat$anycasualties <- ifelse(Confrontations_cat$category == "no.dead.wounded",
"No", "Yes")
table(Confrontations_cat$anycasualties)
casualties_present <- glm(anycasualties ~ .,
family = binomial(link = "logit"), data = Confrontations_cat)
class(Confrontations_cat$anycasualties)
Confrontations_cat$anycasualties <- as.factor(Confrontations_cat$anycasualties)
class(Confrontations_cat$anycasualties)
table(Confrontations_cat$anycasualties)
casualties_present <- glm(anycasualties ~ .,
family = binomial(link = "logit"), data = Confrontations_cat)
casualties_present <- glm(anycasualties ~ army,
family = binomial(link = "logit"), data = Confrontations_cat)
(casualties_present <- glm(anycasualties ~ army,
family = binomial(link = "logit"), data = Confrontations_cat))
(casualties_present <- glm(anycasualties ~ army + navy + federal.police + municipal.police + afi + ministerial.police +
army*navy + navy*municipal.police + army*municipal.police,
family = binomial(link = "logit"), data = Confrontations_cat))
summary(casualties_present <- glm(anycasualties ~ army + navy + federal.police + municipal.police + afi + ministerial.police +
army*navy + navy*municipal.police + army*municipal.police,
family = binomial(link = "logit"), data = Confrontations_cat))
knitr::opts_chunk$set(echo = TRUE)
if (!require("dplyr")) {
install.packages("dplyr", dependencies = TRUE)
library(dplyr)
}
if (!require("tidyr")) {
install.packages("tidyr", dependencies = TRUE)
library(tidyr)
}
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
}
if (!require("readr")) {
install.packages("readr", dependencies = TRUE)
library(readr)
}
if (!require("pscl")) {
install.packages("pscl", dependencies = TRUE)
library(pscl)
}
if (!require("MASS")) {
install.packages("MASS", dependencies = TRUE)
library(MASS)
}
if (!require("boot")) {
install.packages("boot", dependencies = TRUE)
library(boot)
}
if (!require("AICcmodavg")) {
install.packages("AICcmodavg", dependencies = TRUE)
library(AICcmodavg)
}
if (!require("lubridate")) {
install.packages("lubridate", dependencies = TRUE)
library(lubridate)
}
if (!require("randomForest")) {
install.packages("randomForest", dependencies = TRUE)
library(randomForest)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
setwd("G:/Google Drive/_school/QMSS5999 - Thesis/HCMST - ICPSR_30103/DS0001") # on home PC
load(choose.files()) # choose 30103-0001-Data.rda
hcmst <- da30103.0001
str(hcmst)
ggplot(hcmst, aes(x = PPRENT, col = PPMSACAT)) +
geom_histogram(stat = "count")
if (!require("dplyr")) {
install.packages("dplyr", dependencies = TRUE)
library(dplyr)
}
if (!require("tidyr")) {
install.packages("tidyr", dependencies = TRUE)
library(tidyr)
}
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
}
if (!require("readr")) {
install.packages("readr", dependencies = TRUE)
library(readr)
}
if (!require("pscl")) {
install.packages("pscl", dependencies = TRUE)
library(pscl)
}
if (!require("MASS")) {
install.packages("MASS", dependencies = TRUE)
library(MASS)
}
if (!require("boot")) {
install.packages("boot", dependencies = TRUE)
library(boot)
}
if (!require("AICcmodavg")) {
install.packages("AICcmodavg", dependencies = TRUE)
library(AICcmodavg)
}
if (!require("lubridate")) {
install.packages("lubridate", dependencies = TRUE)
library(lubridate)
}
if (!require("randomForest")) {
install.packages("randomForest", dependencies = TRUE)
library(randomForest)
}
Confrontations <- read.csv("AllViolenceData_170216.csv")
Confrontations$date <- as.Date(Confrontations$date)
str(Confrontations)
# randomForest algorithm
set.seed(34593475)
# may have to use rfImpute to impute missing values but dropping for now
Confrontations_nafix <- Confrontations[ , apply(Confrontations, 2, function(x) !any(is.na(x)))]
which(colnames(Confrontations_nafix) == "civilian.dead")
rf <- randomForest(x = Confrontations_nafix[ , -17], y = Confrontations[ , 17], ntree = 100,
na.action = na.omit, importance = TRUE, proximity = TRUE)
rf
plot(rf$mse)
plot(rf$importance[,1])
varImpPlot(rf, main = "Variance Importance Plot",
cex = .6, pt.cex = .8, pch = 6, bg = "blue")
# class(rf$importance[,1])
#ggplot(as.data.frame(rf$importance),
#       aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
#  geom_point() +
#  theme(axis.text.y = element_text(size = 6))
# randomForest algorithm
set.seed(34593475)
# may have to use rfImpute to impute missing values but dropping for now
Confrontations_nafix <- Confrontations[ , apply(Confrontations, 2, function(x) !any(is.na(x)))]
rf <- randomForest(x = Confrontations_nafix[ , -which(colnames(Confrontations_nafix) == "civilian.dead")],
y = Confrontations[ , which(colnames(Confrontations_nafix) == "civilian.dead")], ntree = 100,
na.action = na.omit, importance = TRUE, proximity = TRUE)
rf
plot(rf$mse)
varImpPlot(rf, main = "Variance Importance Plot",
cex = .6, pt.cex = .8, pch = 6, bg = "blue")
# class(rf$importance[,1])
#ggplot(as.data.frame(rf$importance),
#       aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
#  geom_point() +
#  theme(axis.text.y = element_text(size = 6))
# randomForest algorithm
set.seed(34593475)
# may have to use rfImpute to impute missing values but dropping for now
Confrontations_nafix <- Confrontations[ , apply(Confrontations, 2, function(x) !any(is.na(x)))]
rf <- randomForest(x = Confrontations_nafix[ , -which(colnames(Confrontations_nafix) == "civilian.dead")],
y = Confrontations_nafix[ , which(colnames(Confrontations_nafix) == "civilian.dead")],
ntree = 100, importance = TRUE, proximity = TRUE)
rf
plot(rf$mse)
varImpPlot(rf, main = "Variance Importance Plot",
cex = .6, pt.cex = .8, pch = 6, bg = "blue")
# class(rf$importance[,1])
#ggplot(as.data.frame(rf$importance),
#       aes(x = rf$importance[,1], y = reorder(rownames(rf$importance), rf$importance[,1]))) +
#  geom_point() +
#  theme(axis.text.y = element_text(size = 6))
table(Confrontations$category)
Confrontations_cat <- Confrontations
Confrontations_cat$anycasualties <- ifelse(Confrontations_cat$category == "no.dead.wounded",
"No", "Yes")
Confrontations_cat$anycasualties <- as.factor(Confrontations_cat$anycasualties)
summary(casualties_present <- glm(anycasualties ~ army + navy + federal.police + municipal.police + afi + ministerial.police +
army*navy + navy*municipal.police + army*municipal.police,
family = binomial(link = "logit"), data = Confrontations_cat))
# marginal effects
vcov(casualties_present)
which(colnames(Confrontations_nafix) == c("global.id", "event.id"))
which(colnames(Confrontations) == c("global.id", "event.id"))
which(colnames(Confrontations) == "global.id")
Confrontations <- Confrontations[ , -c(which(colnames(Confrontations) == "global.id"),
which(colnames(Confrontations) == "event.id"),
which(colnames(Confrontations) == "global.id"))]
Confrontations <- read.csv("AllViolenceData_170216.csv")
Confrontations$date <- as.Date(Confrontations$date)
# take out global.id, event.id, unix.timestamp
Confrontations <- Confrontations[ , -c(which(colnames(Confrontations) == "global.id"),
which(colnames(Confrontations) == "event.id"),
which(colnames(Confrontations) == "unix.timestamp"))]
str(Confrontations)
library(tidyverse)
load(choose.files()) # choose 30103-0001-Data.rda
hcmst <- da30103.0001
table(hcmst$Q7B)
table(hcmst$Q6B)
table(hcmst$PPETHM)
table(hcmst$PPQ14ARACE)
hcmst$same_educ <- ifelse(hcmst$PPEDUC %in% hcmst$Q10, 1, 0)
hcmst$same_relig <- ifelse(hcmst$PAPRELIGION %in% hcmst$Q7B, 1, 0)
hcmst$same_race <- ifelse(hcmst$RESPONDENT_RACE %in% hcmst$PARTNER_RACE, 1, 0)
hcmst$same_polit <- ifelse(hcmst$PPPARTYID3 %in% hcmst$Q12, 1, 0)
hcmst$similar_age <- ifelse(AGE_DIFFERENCE < 2, 1, 0)
hcmst$similar_age <- ifelse(hcmst$AGE_DIFFERENCE < 2, 1, 0)
summary(lm(as.numeric(RELATIONSHIP_QUALITY) ~ same_educ + same_relig +
same_race + same_polit + same_age, data = hcmst))
summary(lm(as.numeric(RELATIONSHIP_QUALITY) ~ same_educ + same_relig +
same_race + same_polit + similar_age, data = hcmst))
table(hcmst$same_race)
table(hcmst$RESPONDENT_RACE, hcmst$PARTNER_RACE)
interaction_plot_binary <- function(model, effect, moderator, interaction, varcov="default", conf=.95, title="Marginal effects plot", xlabel="Value of moderator", ylabel="Estimated marginal coefficient", factor_labels=c(0,1)){
# Extract Variance Covariance matrix
if (varcov == "default"){
covMat = vcov(model)
}else{
covMat = varcov
}
# Extract the data frame of the model
mod_frame = model.frame(model)
# Get coefficients of variables
beta_1 = model$coefficients[[effect]]
beta_3 = model$coefficients[[interaction]]
# Create list of moderator values at which marginal effect is evaluated
x_2 <- c(0,1)
# Compute marginal effects
delta_1 = beta_1 + beta_3*x_2
# Compute variances
var_1 = covMat[effect,effect] + (x_2^2)*covMat[interaction, interaction] + 2*x_2*covMat[effect, interaction]
# Standard errors
se_1 = sqrt(var_1)
# Upper and lower confidence bounds
z_score = qnorm(1 - ((1 - conf)/2))
upper_bound = delta_1 + z_score*se_1
lower_bound = delta_1 - z_score*se_1
# Determine the bounds of the graphing area
max_y = max(upper_bound)
min_y = min(lower_bound)
# Initialize plotting window
plot(x=c(), y=c(), ylim=c(min_y, max_y), xlim=c(-.5, 1.5), xlab=xlabel, ylab=ylabel, main=title, xaxt="n")
# Plot points of estimated effects
points(x=x_2, y=delta_1, pch=16)
# Plot lines of confidence intervals
lines(x=c(x_2[1], x_2[1]), y=c(upper_bound[1], lower_bound[1]), lty=1)
points(x=c(x_2[1], x_2[1]), y=c(upper_bound[1], lower_bound[1]), pch=c(25,24), bg="black")
lines(x=c(x_2[2], x_2[2]), y=c(upper_bound[2], lower_bound[2]), lty=1)
points(x=c(x_2[2], x_2[2]), y=c(upper_bound[2], lower_bound[2]), pch=c(25,24), bg="black")
# Label the axis
axis(side=1, at=c(0,1), labels=factor_labels)
# Add a dashed horizontal line for zero
abline(h=0, lty=3)
}
interaction_plot_binary(casualties_present, effect = "army", moderator = "navy", interaction = "army*navy")
casualties_present$coefficients
casualties_present$coefficients[[interaction]]
summary(casualties_present <- glm(anycasualties ~ army + navy + federal.police + municipal.police + afi + ministerial.police +
army:navy + navy:municipal.police + army:municipal.police,
family = binomial(link = "logit"), data = Confrontations_cat))
casualties_present$coefficients[[interaction]]
casualties_present$coefficients[interaction]
casualties_present$coefficients
casualties_present$coefficients["army"]
interaction_plot_binary <- function(model, effect, moderator, interaction, varcov="default", conf=.95, title="Marginal effects plot", xlabel="Value of moderator", ylabel="Estimated marginal coefficient", factor_labels=c(0,1)){
# Extract Variance Covariance matrix
if (varcov == "default"){
covMat = vcov(model)
}else{
covMat = varcov
}
# Extract the data frame of the model
mod_frame = model.frame(model)
# Get coefficients of variables
beta_1 = model$coefficients[effect]
beta_3 = model$coefficients[interaction]
# Create list of moderator values at which marginal effect is evaluated
x_2 <- c(0,1)
# Compute marginal effects
delta_1 = beta_1 + beta_3*x_2
# Compute variances
var_1 = covMat[effect,effect] + (x_2^2)*covMat[interaction, interaction] + 2*x_2*covMat[effect, interaction]
# Standard errors
se_1 = sqrt(var_1)
# Upper and lower confidence bounds
z_score = qnorm(1 - ((1 - conf)/2))
upper_bound = delta_1 + z_score*se_1
lower_bound = delta_1 - z_score*se_1
# Determine the bounds of the graphing area
max_y = max(upper_bound)
min_y = min(lower_bound)
# Initialize plotting window
plot(x=c(), y=c(), ylim=c(min_y, max_y), xlim=c(-.5, 1.5), xlab=xlabel, ylab=ylabel, main=title, xaxt="n")
# Plot points of estimated effects
points(x=x_2, y=delta_1, pch=16)
# Plot lines of confidence intervals
lines(x=c(x_2[1], x_2[1]), y=c(upper_bound[1], lower_bound[1]), lty=1)
points(x=c(x_2[1], x_2[1]), y=c(upper_bound[1], lower_bound[1]), pch=c(25,24), bg="black")
lines(x=c(x_2[2], x_2[2]), y=c(upper_bound[2], lower_bound[2]), lty=1)
points(x=c(x_2[2], x_2[2]), y=c(upper_bound[2], lower_bound[2]), pch=c(25,24), bg="black")
# Label the axis
axis(side=1, at=c(0,1), labels=factor_labels)
# Add a dashed horizontal line for zero
abline(h=0, lty=3)
}
interaction_plot_binary(casualties_present, effect = "army", moderator = "navy", interaction = "army:navy")
hcmst$same_race <- ifelse(hcmst$RESPONDENT_RACE %in% hcmst$PARTNER_RACE, 1, 0)
hcmst$sameness <- hcmst$same_educ + hcmst$same_polit + hcmst$same_race + hcmst$same_relig + hcmst$similar_age
table(hcmst$sameness)
summary(lm(RELATIONSHIP_QUALITY ~ as.factor(sameness), data = hcmst))
summary(lm(as.numeric(RELATIONSHIP_QUALITY) ~ as.factor(sameness), data = hcmst))
